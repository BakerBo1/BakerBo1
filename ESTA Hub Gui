-- Load the Orion Library
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()

-- Create a window
local Window = OrionLib:MakeWindow({
    Name = "Esta Hub - BakerBoi384",
    SaveConfig = true,
    ConfigFolder = "MyComplexScriptConfig"
})

-- Create tabs
local Tab1 = Window:MakeTab({
    Name = "Main",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local Tab2 = Window:MakeTab({
    Name = "Visual",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local Tab3 = Window:MakeTab({
    Name = "Lock/Esp",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local Tab4 = Window:MakeTab({
    Name = "Player",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

local Tab5 = Window:MakeTab({
    Name = "Misc",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- Add sections to Tab One
local Section1_Tab1 = Tab1:AddSection({
    Name = "Section 1 - Tab One"
})

local Section2_Tab1 = Tab1:AddSection({
    Name = "Section 2 - Tab One"
})

-- Define a function to enable No Clip
local function EnableNoClip()
    noClipScript = loadstring(game:HttpGet("https://raw.githubusercontent.com/BakerBo1/No-clip/main/No%20clip", true))
    if noClipScript then
        noClipScript()
    else
        warn("Failed to load No Clip script")
    end
end

-- Define a function to disable No Clip
local function DisableNoClip()
    -- Reset player's collision properties
    ResetCollision()
    -- Unload the No Clip script
    noClipScript = nil
end

-- Add UI elements to Tab One sections
Section1_Tab1:AddToggle({
    Name = "No Clip",
    Default = false,
    Callback = function(Value)
        if Value then
            -- Enable No Clip
            EnableNoClip()
        else
            -- Disable No Clip
            DisableNoClip()
        end
    end
})



Section2_Tab1:AddToggle({
    Name = "No Recoil",
    Default = false,
    Callback = function(Value)
        print("Toggle 1 value changed to:", Value)
    end
})

-- Add sections to Tab Two
local Section1_Tab2 = Tab2:AddSection({
    Name = "Section 1 - Tab Two"
})

local Section2_Tab2 = Tab2:AddSection({
    Name = "Section 2 - Tab Two"
})

-- Add UI elements to Tab Two sections
Section1_Tab2:AddSlider({
    Name = "Slider 1 - Section 1",
    Min = 0,
    Max = 100,
    Default = 50,
    Callback = function(Value)
        print("Slider 1 value changed to:", Value)
    end
})

Section2_Tab2:AddTextbox({
    Name = "Textbox 1 - Section 2",
    Default = "Enter text here",
    Callback = function(Value)
        print("Textbox 1 value changed to:", Value)
    end
})

-- Add sections to Tab Three
local Section1_Tab3 = Tab3:AddSection({
    Name = "Section 1 - Tab Three"
})

local Section2_Tab3 = Tab3:AddSection({
    Name = "Section 2 - Tab Three"
})

-- Add UI elements to Tab Three sections
Section1_Tab3:AddLabel("Label 1 - Section 1")

Section2_Tab3:AddColorpicker({
    Name = "Colorpicker 1 - Section 2",
    Default = Color3.fromRGB(255, 0, 0),
    Callback = function(Value)
        print("Colorpicker 1 value changed to:", Value)
    end
})

-- Initialize the Orion Library
OrionLib:Init()

-- Define variables for GUI dragging
local UserInputService = game:GetService("UserInputService")
local guiDragging = false
local guiStartPosition = nil
local guiOffset = nil

-- Function to handle GUI dragging
local function startDragging(input)
    guiDragging = true
    guiStartPosition = Window.Position
    guiOffset = input.Position - Window.Position
end

local function stopDragging()
    guiDragging = false
end

local function updateDragging(input)
    if guiDragging then
        Window.Position = UDim2.new(0, input.Position.X - guiOffset.X, 0, input.Position.Y - guiOffset.Y)
    end
end

-- Add touch input listeners for GUI dragging
UserInputService.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.Touch then
        startDragging(input)
    end
end)

UserInputService.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.Touch then
        updateDragging(input)
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.Touch then
        stopDragging()
    end
end)
